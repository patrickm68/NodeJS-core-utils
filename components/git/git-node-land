#!/usr/bin/env node

const getMetadata = require('../metadata');
const CLI = require('../../lib/cli');
const Request = require('../../lib/request');
const {
  runPromise
} = require('../../lib/run');
const LandingSession = require('../../lib/landing_session');

const START = 'START';
const APPLY = 'APPLY';
const AMEND = 'AMEND';
const FINAL = 'FINAL';
const CONTINUE = 'CONTINUE';
const ABORT = 'ABORT';

const states = [
  [START, (args) => !isNaN(parseInt(args[0]))],
  [CONTINUE, (args) => args[0] === '--continue'],
  [APPLY, (args) => args[0] === '--apply'],
  [AMEND, (args) => args[0] === '--amend'],
  [FINAL, (args) => args[0] === '--final'],
  [ABORT, (args) => args[0] === '--abort']
];

const cli = new CLI(process.stderr);
const req = new Request();
const dir = process.cwd();
const args = process.argv.slice(2);

const result = states.filter(([state, pred]) => pred(args));
if (result.length) {
  const state = result[0][0];
  runPromise(main(state, args).catch((err) => {
    if (cli.spinner.enabled) {
      cli.spinner.fail();
    }
    throw err;
  }));
} else {
  cli.error('Usage: `git node land <PRID>`');
  process.exit(1);
}

async function main(state, args) {
  let session = new LandingSession(cli, req, dir);

  try {
    session.restore();
  } catch (err) { // JSON error?
    if (state === ABORT) {
      await session.abort();
      return;
    }
    cli.warn(
      'Failed to detect previous session. ' +
      'please run `git node land --abort`');
    return;
  }

  if (state === START) {
    if (session.hasStarted()) {
      cli.warn(
        'Previous `git node land` session for ' +
        `${session.pullName} in progress.`);
      cli.log('run `git node land --abort` before starting a new session');
      return;
    }
    session = new LandingSession(cli, req, dir, parseInt(args[0]));
    const { repo, owner, prid } = session;
    const metadata = await getMetadata({ repo, owner, prid }, cli);
    return session.start(metadata);
  } else if (state === APPLY) {
    return session.apply();
  } else if (state === AMEND) {
    return session.amend();
  } else if (state === FINAL) {
    return session.final();
  } else if (state === ABORT) {
    return session.abort();
  } else if (state === CONTINUE) {
    return session.continue();
  }
}
