#!/usr/bin/env node

'use strict';

const {
  PRBuild, BenchmarkRun, CommitBuild, parseJobFromURL,
  constants, JobParser
  // , jobCache
} = require('../lib/ci');
const clipboardy = require('clipboardy');

const {
  PR, COMMIT, BENCHMARK
} = constants;

const { runPromise } = require('../lib/run');
const auth = require('../lib/auth');
const Request = require('../lib/request');
const CLI = require('../lib/cli');
const yargs = require('yargs');

// This is used for testing
// Default cache dir is ${ncu-source-dir}/.ncu/cache
// jobCache.enable();

// eslint-disable-next-line no-unused-vars
const argv = yargs
  .command({
    command: 'url <url>',
    desc: 'Automatically detect CI type and show results',
    builder: (yargs) => {
      yargs
        .positional('url', {
          describe: 'URL of the PR or the CI',
          type: 'string'
        });
    },
    handler
  })
  .command({
    command: 'pr <jobid>',
    desc: 'Show results of a node-test-pull-request CI job',
    builder: (yargs) => {
      yargs
        .positional('jobid', {
          describe: 'id of the job',
          type: 'number'
        });
    },
    handler
  })
  .command({
    command: 'commit <jobid>',
    desc: 'Show results of a node-test-commit CI job',
    builder: (yargs) => {
      yargs
        .positional('jobid', {
          describe: 'id of the job',
          type: 'number'
        });
    },
    handler
  })
  .command({
    command: 'benchmark <jobid>',
    desc: 'Show results of a benchmark-node-micro-benchmarks CI job',
    builder: (yargs) => {
      yargs
        .positional('jobid', {
          describe: 'id of the job',
          type: 'number'
        });
    },
    handler
  })
  .demandCommand(1, 'must provide a valid command')
  .option('copy', {
    default: false,
    describe: 'Write the results as markdown to clipboard'
  })
  .help()
  .argv;

async function getResults(cli, request, job) {
  let build;
  const { type, jobid } = job;
  if (type === PR) {
    build = new PRBuild(cli, request, jobid);
    await build.getResults();
  } else if (type === COMMIT) {
    build = new CommitBuild(cli, request, jobid);
    await build.getResults();
  } else if (type === BENCHMARK) {
    build = new BenchmarkRun(cli, request, jobid);
    await build.getResults();
  } else {
    yargs.showHelp();
    return;
  }
  return build;
}

async function main(command, argv) {
  const cli = new CLI();
  const credentials = await auth();
  const request = new Request(credentials);
  const queue = [];

  const commandToType = {
    'commit': COMMIT,
    'pr': PR,
    'benchmark': BENCHMARK
  };

  if (command === 'url') {
    let parsed = parseJobFromURL(argv.url);
    if (parsed) {
      queue.push({
        type: parsed.type,
        jobid: parsed.jobid,
        copy: argv.copy
      });
    } else {
      const parser = await JobParser.fromPR(argv.url, cli, request);
      if (!parser) {  // Not a valid PR URL
        return yargs.showHelp();
      }
      const ciMap = parser.parse();
      for (const [type, ci] of ciMap) {
        queue.push({
          type: type,
          jobid: ci.jobid,
          copy: argv.copy
        });
      }
    }
  } else {
    queue.push({
      type: commandToType[command],
      jobid: argv.jobid,
      copy: argv.copy
    });
  }

  let dataToCopy = '';

  for (let job of queue) {
    const build = await getResults(cli, request, job);
    build.display();

    if (argv.copy) {
      dataToCopy += build.formatAsMarkdown();
    }
  }

  if (argv.copy) {
    clipboardy.writeSync(dataToCopy);
    cli.separator('');
    cli.log(`Written markdown to clipboard`);
  }
}

function handler(argv) {
  const [ command ] = argv._;
  runPromise(main(command, argv));
}
